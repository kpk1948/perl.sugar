<?xml version="1.0" encoding="UTF-8"?>
<syntax name="sourcecode.perl">
	<zones>
		<!-- perl Source Block; -->
		<zone name="container.block.embedded.source.perl">
			<subzones>
				<include collection="language" />
			</subzones>
		</zone>
	</zones>
	
	<library>
	    <!-- Includes all other collections -->
	    <collection name="language">
	        <include collection="metadata.comment.documentation" />
	        <include collection="metadata.comment" />
	        <include collection="literal.collection" />
	        <include collection="container.class" />
	        <include collection="container.block" />
	        <include collection="container.function" />
	        <include collection="identifier.function" />
	        <include collection="identifier.variable" />
	        <include collection="identifier.class" />
	        <include collection="literal.keyword" />
	        <include collection="literal.string" />
	        <include collection="literal.numeric" />
	        <include collection="literal.regex"/>
	        <include collection="delimiter" />
	        <include collection="operator" />
	        <include collection="keyword" />
	    </collection>
	    
	    <!-- Plain Old Documentation (POD) -->
	    <collection name="metadata.comment.documentation">
	        <zone name="metadata.comment.documentation.block">
	            <starts-with>
					<expression>\A(=(?:pod|head[0-4]|over|item|back|begin|end|for|encoding|cut))\b</expression>
					<capture number="1" name="metadata.comment.documentation.keyword"/>
				</starts-with>
				<ends-with>
					<expression>\A(=cut)</expression>
					<capture number="1" name="metadata.comment.documentation.keyword"/>
				</ends-with>
				<subzones>
        	        <zone>
        	    		<expression>\A(=(?:pod|head[0-4]|over|item|back|begin|end|for|encoding|cut))\b</expression>
        	    		<capture number="1" name="metadata.comment.documentation.keyword"/>
        	    	</zone>
        	    	<zone name="metadata.comment.documentation.markup.underline.link">
        	    		<expression>((https?|s?ftp|ftps|file|smb|afp|nfs|(x-)?man|gopher|txmt)://|mailto:)[-:@a-zA-Z0-9_.~%+/?=&amp;#]+(?&lt;![.?:])</expression>
        	    	</zone>
        	    	<zone name="metadata.comment.documentation.markup.formattingCode">
        	    	    <expression>([IBCLEFSXZ]&lt;[^&gt;]+&gt;)</expression>
        	    	</zone>
        	    </subzones>
			</zone>
	    </collection>
	    
	    
	    <!-- Metadata -->
	    <collection name="metadata.comment">
	        <!-- # comment -->
	        <zone name="metadata.comment.line.hash">
                <expression>(#)(\s?(.*)?$\n?)</expression>
			    <capture number="1" name="delimiter.separator.hash.comment.begin" />
			    <capture number="3" name="content" />
	        </zone>
	    </collection>
	    
	    <!-- Literals -->
	    <collection name="literal.string">
            <zone name="literal.string.quoted.single">
                <starts-with>
                    <expression>'</expression>
                    <capture number="0" name="delimiter.balanced.quote.single.begin"/>
                </starts-with>
                <ends-with>
                    <expression>'</expression>
                    <capture number="0" name="delimiter.balanced.quote.single.end"/>
                </ends-with>
                <subzones>
                    <zone name="literal.escape.brief">
                        <!-- 'A single-quoted string with \'escape sequences\'' -->
                        <expression>(\\)('|\\)</expression>
                        <capture number="1" name="delimiter.seperator.escape"/>
                        <capture number="2" name="character"/>
                    </zone>
                </subzones>
            </zone>
            
            <zone name="literal.string.backtick">
                <starts-with>
                    <expression>`</expression>
                    <capture number="0" name="delimiter.balanced.backtick.begin"/>
                </starts-with>
                <ends-with>
                    <expression>`</expression>
                    <capture number="0" name="delimiter.balanced.backtick.end"/>
                </ends-with>
                <subzones>
                    <include collection="identifier.variable" />
                </subzones>
            </zone>
            
            <zone name="literal.string.quoted.double">
                <starts-with>
                    <expression>"</expression>
                    <capture number="0" name="delimiter.balanced.quote.double.begin"/>
                </starts-with>
                <ends-with>
                    <expression>"</expression>
                    <capture number="0" name="delimiter.balanced.quote.double.end"/>
                </ends-with>
                <subzones>
                    <include collection="identifier.variable" />
                    <zone name="literal.escape.brief">
                        <!-- 'A single-quoted string with \'escape sequences\'' -->
                        <expression>(\\)("|\\)</expression>
                        <capture number="1" name="delimiter.seperator.escape"/>
                        <capture number="2" name="character"/>
                    </zone>
                </subzones>
            </zone>
            
            <zone name="literal.string.unquoted.heredoc">
                <starts-with>
                    <expression>(&lt;&lt;-?)(\w+)</expression>
                </starts-with>
                <starts-with>
                    <expression>\2</expression>
                </starts-with>
            </zone>
            
	    </collection>
	    
        <collection name="literal.numeric">
            <!--
            I want to seperately hilight all the different types of
            literal.numerics. So, we have to provide multiple similar definitions
            of a literal.numeric.
            
            Grabbed from elliottcable's Ruby.sugar
            -->
            <!-- 01756 -->
            <zone name="literal.numeric.integer.octal">
                <expression>\b(0)([0-7]+)\b</expression>
                <capture number="1" name="numeric.delimiter.octal.initial-zero"/>
                <capture number="2" name="numeric.octal.value"/>
            </zone>
            <!-- 0b010010110 -->
            <zone name="literal.numeric.integer.binary">
                <expression>\b(0(?:b|B))([01]+)\b</expression>
                <capture number="1" name="numeric.delimiter.binary.initial-zero-b"/>
                <capture number="2" name="numeric.binary.value"/>
            </zone>
            <!-- 0xDEADBEEF586 -->
            <zone name="literal.numeric.integer.hex">
                <expression>\b(0(?:x|X))([0-9a-fA-F]+)\b</expression>
                <capture number="1" name="numeric.delimiter.hexadecimal.initial-zero-x"/>
                <capture number="2" name="numeric.hexadecimal.value"/>
            </zone>
            <!-- 142.87e3, 0.22e8 -->
            <zone name="literal.numeric.float.with-exponent">
                <expression>\b(0|[1-9][0-9]*)(\.)([0-9]+)(e|E)(-?[0-9]+)\b</expression>
                <capture number="1" name="integral.value"/>
                <capture number="2" name="delimiter.seperator.radix-point"/>
                <capture number="3" name="fractional.value"/>
                <capture number="4" name="literal.numeric.exponent.delimiter"/>
                <capture number="5" name="literal.numeric.exponent.value"/>
            </zone>
            <!-- 142.87, 0.22 -->
            <zone name="literal.numeric.float">
                <expression>\b(0|[1-9][0-9]*)(\.)([0-9]+)\b</expression>
                <capture number="1" name="integral.value"/>
                <capture number="2" name="delimiter.seperator.radix-point"/>
                <capture number="3" name="fractional.value"/>
            </zone>
            <!-- 142e3, 0e8 -->
            <zone name="literal.numeric.integer.decimal.with-exponent">
                <expression>\b(0|[1-9][0-9]*)(e|E)(-?[0-9]+)\b</expression>
                <capture number="1" name="integral.value"/>
                <capture number="2" name="literal.numeric.exponent.delimiter"/>
                <capture number="3" name="literal.numeric.exponent.value"/>
            </zone>
            <!-- 142e3, 0e8 -->
            <zone name="literal.numeric.integer.decimal">
                <expression>\b(0|[1-9][0-9]*)\b</expression>
                <capture number="1" name="integral.value"/>
            </zone>
        </collection>
        
        <collection name="literal.keyword">
            <zone name="literal.keyword.nothing.undef">
            	<expression>\bundef\b</expression>
            </zone>
        </collection>
    
	    <collection name="literal.collection">
	        <zone name="literal.collection.dictionary.array">
	            <starts-with>
                    <expression>(\barray\b)\s*(\()</expression>
                    <capture number="1" name="keyword.definition.array.begin" />
                    <capture number="2" name="delimiter.balanced.parenthesis.begin" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.end" />
                </ends-with>
                <subzones>
                    <include collection="literal.collection" />
                    <include collection="container.function" />
        	        <include collection="identifier.function" />
        	        <include collection="literal.keyword" />
        	        <include collection="keyword" />
        	        <include collection="identifier.class" />
        	        <include collection="identifier.variable" />
        	        <include collection="literal.string" />
        	        <include collection="delimiter" />
        	        <include collection="operator" />
                </subzones>
	        </zone>
	    </collection>
	    
	    <collection name="literal.regex">
	      <!-- /regular expression/ -->
	      <zone name="literal.regex">
	        <starts-with>
	          <expression>m?(/)</expression>
	          <capture number="0" name="delimiter.balanced.slash.begin"/>
	        </starts-with>
	        <ends-with>
	          <expression>(/)([iomxneus]*)</expression>
	          <capture number="1" name="delimiter.balanced.slash.end"/>
	          <capture number="2" name="literal.regex.modifier"/>
	        </ends-with>
	        <subzones>
	          <include syntax="name.elliottcable.Espresso.Syntax.Expression.Regex"/>
	        </subzones>
	      </zone>
	      
	      <zone name="literal.regex.replace">
	          <starts-with>
	              <expression>\b(s|tr|y)\s*([^A-Za-z0-9\s])</expression>
	              <capture number="1" name="keyword.function.perl"/>
	              <capture number="2" name="keyword.control.other.delimiter.regexp"/>
	          </starts-with>
	          <ends-with>
	              <expression>(\2)(.*?)(?&lt;!\\)(\\{2})*(\2)([iomxneusg]*)</expression>
	              <capture number="1" name="keyword.control.other.delimiter.regexp"/>
	              <capture number="2" name="literal.regex.replace.replace-part"/>
	              <capture number="3" name="literal.regex.replace.replace-part"/>
	              <capture number="4" name="keyword.control.other.delimiter.regexp"/>
	              <capture number="5" name="literal.regex.modifier"/>
	          </ends-with>
	          <subzones>
	            <include syntax="name.elliottcable.Espresso.Syntax.Expression.Regex"/>
	          </subzones>
	      </zone>
	      
	      <zone name="literal.regex.percent-delimited.interpolated.parenthesis">
	        <starts-with>
	          <expression>(%)(r)(\()</expression>
	          <capture number="1" name="delimiter.literal.percent-delimiter"/>
	          <capture number="2" name="delimiter.literal.percent-delimited.qualifier"/>
	          <capture number="3" name="delimiter.balanced.percent-delimited.begin"/>
	        </starts-with>
	        <ends-with>
	          <expression>(\))([iomxneus]*)</expression>
	          <capture number="1" name="delimiter.balanced.percent-delimited.begin"/>
	          <capture number="2" name="literal.regex.modifier"/>
	        </ends-with>
	        <subzones>
	          <include syntax="name.elliottcable.Espresso.Syntax.Expression.Regex"/>
	        </subzones>
	      </zone>
	      <zone name="literal.regex.percent-delimited.interpolated.square-brace">
	        <starts-with>
	          <expression>(%)(r)(\[)</expression>
	          <capture number="1" name="delimiter.literal.percent-delimiter"/>
	          <capture number="2" name="delimiter.literal.percent-delimited.qualifier"/>
	          <capture number="3" name="delimiter.balanced.percent-delimited.begin"/>
	        </starts-with>
	        <ends-with>
	          <expression>(\])([iomxneus]*)</expression>
	          <capture number="1" name="delimiter.balanced.percent-delimited.begin"/>
	          <capture number="2" name="literal.regex.modifier"/>
	        </ends-with>
	        <subzones>
	          <include syntax="name.elliottcable.Espresso.Syntax.Expression.Regex"/>
	        </subzones>
	      </zone>
	      <zone name="literal.regex.percent-delimited.interpolated.curly-brace">
	        <starts-with>
	          <expression>(%)(r)(\{)</expression>
	          <capture number="1" name="delimiter.literal.percent-delimiter"/>
	          <capture number="2" name="delimiter.literal.percent-delimited.qualifier"/>
	          <capture number="3" name="delimiter.balanced.percent-delimited.begin"/>
	        </starts-with>
	        <ends-with>
	          <expression>(\})([iomxneus]*)</expression>
	          <capture number="1" name="delimiter.balanced.percent-delimited.begin"/>
	          <capture number="2" name="literal.regex.modifier"/>
	        </ends-with>
	        <subzones>
	          <include syntax="name.elliottcable.Espresso.Syntax.Expression.Regex"/>
	        </subzones>
	      </zone>
	      <zone name="literal.regex.percent-delimited.interpolated.angle-brace">
	        <starts-with>
	          <expression>(%)(r)(\&lt;)</expression>
	          <capture number="1" name="delimiter.literal.percent-delimiter"/>
	          <capture number="2" name="delimiter.literal.percent-delimited.qualifier"/>
	          <capture number="3" name="delimiter.balanced.percent-delimited.begin"/>
	        </starts-with>
	        <ends-with>
	          <expression>(\&gt;)([iomxneus]*)</expression>
	          <capture number="1" name="delimiter.balanced.percent-delimited.begin"/>
	          <capture number="2" name="literal.regex.modifier"/>
	        </ends-with>
	        <subzones>
	          <include syntax="name.elliottcable.Espresso.Syntax.Expression.Regex"/>
	        </subzones>
	      </zone>
	      <zone name="literal.regex.percent-delimited.interpolated">
	        <starts-with>
	          <expression>(%)(r)([`~!@#$%^&amp;*-_=+\|'";:.,/?])</expression>
	          <capture number="1" name="delimiter.literal.percent-delimiter"/>
	          <capture number="2" name="delimiter.literal.percent-delimited.qualifier"/>
	          <capture number="3" name="delimiter.balanced.percent-delimited.begin"/>
	        </starts-with>
	        <ends-with>
	          <expression>(\3)([iomxneus]*)</expression>
	          <capture number="1" name="delimiter.balanced.percent-delimited.begin"/>
	          <capture number="2" name="literal.regex.modifier"/>
	        </ends-with>
	        <subzones>
	          <include syntax="name.elliottcable.Espresso.Syntax.Expression.Regex"/>
	        </subzones>
	      </zone>
	    </collection>
	    
		<!-- Keywords -->

		<collection name="keyword">
		    <zone name="keyword.control.flow">
                <expression>\b(last|next|els(e|if)|for(each)?|each|while|exit|if|return|use|sub)\b</expression>
            </zone>

            <zone name="keyword.constant.class">
                <expression>\bconst\b</expression>
            </zone>
            
            <zone name="keyword.control.include">
                <expression>\b(require|include)\b</expression>
            </zone>
            
            <zone name="keyword.control.output">
                <expression>\b(s)?print(f)?\b</expression>
            </zone>

            <zone name="keyword.constant.class.other">
				<expression>([a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*)(::)([a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*)</expression>
				<capture number="1" name="class.name" />
				<capture number="2" name="operator.scope.resolution" />
				<capture number="3" name="keyword.constant.other" />
			</zone>
            
            <zone name="keyword.modifier.scope">
            	<expression>my</expression>
            </zone>
            
			<zone name="keyword.constant.other">
				<expression>[a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*</expression>
			</zone>

			<zone name="keyword.constant.filehandles">
				<expression>(&lt;)?[a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*(&gt;)?</expression>
			</zone>

		</collection>
		
		<!-- Identifiers -->
		
		<collection name="identifier.variable">
		    <zone name="identifier.variable.object.property">
		        <expression>(->)([a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*)</expression>
		        <capture number="1" name="operator.pointer" />
		    </zone>
		    <zone name="identifier.variable.instance.class">
		        <expression>(\$)self\b</expression>
		        <capture number="1" name="operator.dollar-sign.variable.begin" />
		    </zone>
		    <zone name="identifier.variable.local">
		        <expression>(\$)([a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*)</expression>
		        <capture number="1" name="operator.dollar-sign.variable.begin" />
		    </zone>
		    <zone name="identifier.variable.hash">
		        <expression>(%)([a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*)</expression>
		        <capture number="1" name="operator.percent-sign.variable.begin" />
		    </zone>
		    <zone name="identifier.variable.array">
		        <expression>(\@)([a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*)</expression>
		        <capture number="1" name="operator.atat-sign.variable.begin" />
		    </zone>
		    <zone name="identifier.variable.array-last-index">
		        <expression>(\$)(\#)([a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*)</expression>
		        <capture number="1" name="operator.dollar-sign.variable.begin" />
		    </zone>
		    <zone name="identifier.variable.function">
		        <expression>(\&amp;)([a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*)</expression>
		        <capture number="1" name="operator.amp-sign.variable.begin" />
		    </zone>
		</collection>
		
		<collection name="identifier.function">
		    <include collection="identifier.function.support" />
		    
			<zone name="identifier.function">
			    <starts-with>
			        <expression>(\&amp;)?([A-Za-z_][A-Za-z_0-9]*)(\()</expression>
			        <capture number="1" name="delimiter.pointer" />
			        <capture number="2" name="name" />
			        <capture number="3" name="delimiter.balanced.parenthesis.begin" />
			    </starts-with>
				<ends-with>
				    <expression>\)</expression>
				    <capture number="0" name="delimiter.balanced.parenthesis.end" />
				</ends-with>
				<subzones>
				    <include collection="identifier.function.subzones" />
				</subzones>
			</zone>

		    <zone name="identifier.function.object.method">
			    <starts-with>
			        <expression>(->)([A-Za-z_][A-Za-z_0-9]*)(\()</expression>
			        <capture number="1" name="delimiter.pointer" />
			        <capture number="2" name="name" />
			        <capture number="3" name="delimiter.balanced.parenthesis.begin" />
			    </starts-with>
				<ends-with>
				    <expression>\)</expression>
				    <capture number="0" name="delimiter.balanced.parenthesis.end" />
				</ends-with>
				<subzones>
				    <include collection="identifier.function.subzones" />
				</subzones>
			</zone>
			
			<zone name="identifier.function.class.method.static">
				<starts-with>
					<expression>([a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*)(::)([a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*)(\()</expression>
					<capture number="1" name="class.name" />
					<capture number="2" name="operator.scope.resolution" />
					<capture number="3" name="method.name" />
					<capture number="4" name="delimiter.balanced.parenthesis.begin" />
				</starts-with>
				<ends-with>
					<expression>\)</expression>
					<capture number="0" name="delimiter.balanced.parenthesis.end" />
				</ends-with>
				<subzones>
					<include collection="identifier.function.subzones" />
				</subzones>
			</zone>
			
		</collection>
		
		<collection name="identifier.function.subzones">
	        <include collection="language" />
    </collection>
		
		<collection name="identifier.variable.parameter">
		    <include zone="identifier.variable.local" />
		</collection>
		
		<collection name="identifier.class">
		    <include collection="identifier.class.support" />
			<zone name="identifier.class">
				<expression>(?i)\b(new)\s+(?:(\$[a-zA-Z_\x{7f}-\x{ff}][a-zA-Z0-9_\x{7f}-\x{ff}]*)|(\w+))|(\w+)(?=::)</expression>
				<capture number="1" name="keyword.constant.new"/>
				<capture number="2" name="identifier.variable"/>
				<capture number="3" name="identifier.class.name"/>
				<capture number="4" name="identifier.class.static-method"/>
			</zone>
		</collection>
        
        
        <!-- Containers -->
        <collection name="container.function">
            <zone name="container.function.definition">
                <expression>\bsub\s+([A-Za-z_][A-Za-z_0-9]*)\s*(?:\:\s*(?:[A-Za-z_][A-Za-z_0-9]*[, ]?)+)?\s*</expression>
                <capture number="1" name="name" />
            </zone>
        </collection>
        
        <collection name="container.class">
            <zone name="container.class">
                    <expression>(?i)^\s*((abstract|final)?\s*(class)\s+([a-z0-9_]+))\s*((?i:(extends))\s+([a-zA-Z0-9_]+))?\s*((?i:(implements))\s+([a-zA-Z0-9_]+))?</expression>
                    <capture number="1" name="class.current" />
                    <capture number="2" name="keyword.modifier.scope" />
                    <capture number="3" name="keyword.definition.class.begin" />
                    <capture number="4" name="name" />
                    <capture number="5" name="class.extended" />
                    <capture number="6" name="keyword.definition.class.extended.begin" />
                    <capture number="7" name="name" />
                    <capture number="8" name="class.implemented" />
                    <capture number="9" name="keyword.definition.class.implemented.begin" />
                    <capture number="10" name="name" />
            </zone>
        </collection>
        
        <collection name="container.block">
            <zone name="container.block.if">
                <starts-with>
                    <expression>(\bif\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.if" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones" />
                </subzones>
            </zone>
            <zone name="container.block.elsif">
                <starts-with>
                    <expression>(\bels\s*if\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.elsif" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones" />
                </subzones>
            </zone>
            <zone name="container.block.else">
                <expression>(\belse\b)</expression>
                <capture number="1" name="keyword.control.flow.else" />
            </zone>
            <zone name="container.block.foreach">
                <starts-with>
                    <expression>(\bfor\s*each\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.foreach" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end" />
                </ends-with>
                <subzones>
                    <zone name="operator.as">
                        <expression>as</expression>
                    </zone>
                    <include collection="container.block.subzones" />
                </subzones>
            </zone>
            <zone name="container.block.for">
                <starts-with>
                    <expression>\b(for(?:each)?)\b\s*(?:(my)?\s*(\$[A-Za-z_][A-Za-z_0-9]*))?\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.for" />
                    <capture number="2" name="kewyord.modifier.scope" />
                    <capture number="3" name="identifier.variable.local" />
                    <capture number="4" name="delimiter.balanced.parenthesis.condition.begin" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones" />
                </subzones>
            </zone>
            <zone name="container.block.while">
                <starts-with>
                    <expression>(\bwhile\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.while" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones" />
                </subzones>
            </zone>
            <zone name="container.block.try">
                <expression>(\btry\b)</expression>
                <capture number="1" name="keyword.control.flow.try" />
            </zone>
            <zone name="container.block.catch">
                <starts-with>
                    <expression>(\bcatch\b)\s*(\()</expression>
                    <capture number="1" name="keyword.control.flow.catch" />
                    <capture number="2" name="delimiter.balanced.parenthesis.condition.begin" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
                    <capture number="0" name="delimiter.balanced.parenthesis.condition.end" />
                </ends-with>
                <subzones>
                    <include collection="container.block.subzones" />
                </subzones>
            </zone>
        </collection>
        
        <collection name="container.block.subzones">
            <zone name="sub-expression">
                <starts-with>\(</starts-with>
                <ends-with>\)</ends-with>
                <subzones>
                    <include collection="language" />
                </subzones>
            </zone>
            <include collection="language" />
        </collection>
        
        <!-- Operators (grabbed from elliottcable's Ruby.sugar) -->
        
        <collection name="operator">
        	<zone name="operator.type.instanceof">
        		<expression>\b(instanceof)\s*([a-zA-Z_]*)</expression>
        		<capture number="1" name="operator.type.instanceof" />
        		<capture number="2" name="identifier.class.name" />
        	</zone>
            <zone name="operator.pointer">
                <expression>-></expression>
            </zone>
            <zone name="operator.dollar-sign.variable">
                <expression>\$</expression>
            </zone>            
            <zone name="operator.amp-sign.variable">
                <expression>&amp;</expression>
            </zone>            
            <zone name="operator.comparator">
                <expression>(!)?(===|==|&lt;|&lt;=|&gt;|&gt;=)</expression>
                <capture number="1" name="not" />
            </zone>
            <zone name="operator.accessor">
                <expression>=|&lt;&lt;|&gt;&gt;</expression>
            </zone>
            <zone name="operator.mathematical">
                <expression>\+|\-|\*|\\|%</expression>
            </zone>
            <zone name="operator.logical.and">
                <expression>\band\b|&amp;&amp;</expression>
            </zone>
            <zone name="operator.logical.or">
                <expression>\bor\b|\|\|</expression>
            </zone>
        </collection>
    
        
        <!-- Delimiters (grabbed from elliottcable's Ruby.sugar) -->
        
        <collection name="delimiter">
            <zone name="delimiter.terminator">
                <expression>\;</expression>
            </zone>
            <zone name="delimiter.separator.comma">
                <expression>,</expression>
            </zone>
            <zone name="delimiter.separator.pairing">
                <expression>=></expression>
            </zone>
            <zone name="delimiter.balanced.curly-brace.begin">
                <expression>\{</expression>
            </zone>
            <zone name="delimiter.balanced.curly-brace.end">
                <expression>\}</expression>
            </zone>
            <zone name="delimiter.balanced.parenthesis.begin">
                <expression>\(</expression>
            </zone>
            <zone name="delimiter.balanced.parenthesis.end">
                <expression>\)</expression>
            </zone>
            <zone name="delimiter.balanced.square-brace.begin">
                <expression>\[</expression>
            </zone>
            <zone name="delimiter.balanced.square-brace.end">
                <expression>\]</expression>
            </zone>
        </collection>
        
        <collection name="identifier.function.support">
            <!-- Array Functions -->
            <zone name="identifier.function.support.array">
                <starts-with>
                    <expression>(?i)\b(my|scalar|exists)(\()</expression>
                    <capture number="1" name="name" />
                    <capture number="41" name="delimiter.balanced.parenthesis.begin" />
                </starts-with>
                <ends-with>
                    <expression>\)</expression>
				    <capture number="0" name="delimiter.balanced.parenthesis.end" />
                </ends-with>
                <subzones>
					<include collection="identifier.function.subzones" />
				</subzones>
            </zone>                
                <!-- Exec Functions -->
                <zone name="identifier.function.support.exec">
                	<starts-with>
                		<expression>(?i)\b((s(hell_exec|ystem)|p(assthru|roc_nice)|e(scapeshell(cmd|arg)|xec)))(\()</expression>
                		<capture number="1" name="name" />
                		<capture number="7" name="delimiter.balanced.parenthesis.begin" />
                	</starts-with>
                	<ends-with>
                		<expression>\)</expression>
                	</ends-with>
                	<subzones>
                		<include collection="identifier.function.subzones" />
                	</subzones>
                </zone>
                                
                <!-- File Functions -->
                <zone name="identifier.function.support.file">
                	<starts-with>
                		<expression>(?i)\b((sys_get_temp_dir|copy|t(empnam|mpfile)|u(nlink|mask)|close|open|binmode|print|f(s(canf|tat|eek)|close|t(ell|runcate)|ile(_(put_contents|get_contents))?|p(utcsv|assthru)|eof|flush|write|flock|read|get(s(s)?|c(sv)?))|r(e(name|a(dfile|lpath)|wind)|mdir)|get_meta_tags|mkdir))(\(?)</expression>
                		<capture number="1" name="name" />
                		<capture number="18" name="delimiter.balanced.parenthesis.begin" />
                	</starts-with>
                	<ends-with>
                		<expression>\)?</expression>
                	</ends-with>
                	<subzones>
                		<include collection="identifier.function.subzones" />
                	</subzones>
                </zone>
                                
                <!-- Main Functions -->
                <zone name="identifier.function.support.main">
                	<starts-with>
                		<expression>(?i)\b(set_time_limit)(\()</expression>
                		<capture number="1" name="name" />
                		<capture number="2" name="delimiter.balanced.parenthesis.begin" />
                	</starts-with>
                	<ends-with>
                		<expression>\)</expression>
                	</ends-with>
                	<subzones>
                		<include collection="identifier.function.subzones" />
                	</subzones>
                </zone>
                
                <!-- Math Functions -->
                <zone name="identifier.function.support.math">
                	<starts-with>
                		<expression>(?i)\b((h(ypot|exdec)|s(in(h)?|qrt)|number_format|c(os(h)?|eil)|is_(nan|infinite|finite)|tan(h)?|octdec|de(c(hex|oct|bin)|g2rad)|exp(m1)?|p(i|ow)|f(loor|mod)|log(1(p|0))?|a(sin(h)?|cos(h)?|tan(h|2)?|bs)|r(ound|ad2deg)|b(indec|ase_convert)))(\()</expression>
                		<capture number="1" name="name" />
                		<capture number="23" name="delimiter.balanced.parenthesis.begin" />
                	</starts-with>
                	<ends-with>
                		<expression>\)</expression>
                	</ends-with>
                	<subzones>
                		<include collection="identifier.function.subzones" />
                	</subzones>
                </zone>

                
                <!-- perl_mysql Functions -->
                <zone name="identifier.function.support_mysql">
                	<starts-with>
                		<expression>(?i)\b(mysql_(s(tat|e(t_charset|lect_db))|num_(fields|rows)|c(onnect|l(ient_encoding|ose)|reate_db)|thread_id|in(sert_id|fo)|d(ata_seek|rop_db|b_query)|unbuffered_query|e(scape_string|rr(no|or))|p(connect|ing)|f(ield_(seek|name|t(ype|able)|flags|len)|etch_(object|field|lengths|a(ssoc|rray)|row)|ree_result)|query|affected_rows|list_(tables|dbs|processes|fields)|re(sult|al_escape_string)|get_(server_info|host_info|client_info|proto_info)))(\()</expression>
                		<capture number="1" name="name" />
                		<capture number="21" name="delimiter.balanced.parenthesis.begin" />
                	</starts-with>
                	<ends-with>
                		<expression>\)</expression>
                	</ends-with>
                	<subzones>
                		<include collection="identifier.function.subzones" />
                	</subzones>
                </zone>               
                
                <!-- Rand Functions -->
                <zone name="identifier.function.support.rand">
                	<starts-with>
                		<expression>(?i)\b((srand|rand))(\()</expression>
                		<capture number="1" name="name" />
                		<capture number="4" name="delimiter.balanced.parenthesis.begin" />
                	</starts-with>
                	<ends-with>
                		<expression>\)</expression>
                	</ends-with>
                	<subzones>
                		<include collection="identifier.function.subzones" />
                	</subzones>
                </zone>
                
                <!-- Reg Functions -->
                <zone name="identifier.function.support.reg">
                	<starts-with>
                		<expression>(?i)\b((s(plit(i)?|ql_regcase)|ereg(i(_replace)?|_replace)?))(\()</expression>
                		<capture number="1" name="name" />
                		<capture number="7" name="delimiter.balanced.parenthesis.begin" />
                	</starts-with>
                	<ends-with>
                		<expression>\)</expression>
                	</ends-with>
                	<subzones>
                		<include collection="identifier.function.subzones" />
                	</subzones>
                </zone>         
                              
                <!-- String Functions -->
                <zone name="identifier.function.support.string">
                	<starts-with>
                		<expression>(?i)\b((hebrev(c)?|s(scanf|imilar_text|tr(s(tr|pn)|natc(asecmp|mp)|c(hr|spn|oll)|i(str|p(slashes|cslashes|os|_tags))|t(o(upper|k|lower)|r)|_(s(huffle|plit)|ireplace|pad|word_count|r(ot13|ep(eat|lace)))|p(os|brk)|r(chr|ipos|ev|pos))|ubstr(_(co(unt|mpare)|replace))?|etlocale)|c(h(unk_split|r)|ount_chars)|nl(2br|_langinfo)|implode|trim|ord|dirname|uc(first|words)|join|pa(thinfo|rse_str)|explode|quotemeta|add(slashes|cslashes)|wordwrap|l(trim|ocaleconv)|rtrim|money_format|b(in2hex|asename)))(\()</expression>
                		<capture number="1" name="name" />
                		<capture number="30" name="delimiter.balanced.parenthesis.begin" />
                	</starts-with>
                	<ends-with>
                		<expression>\)</expression>
                	</ends-with>
                	<subzones>
                		<include collection="identifier.function.subzones" />
                	</subzones>
                </zone>
                                                                
                <!-- Text Functions -->
                <zone name="identifier.function.support.text">
                	<starts-with>
                		<expression>(?i)\b(dom_text_(split_text|is_whitespace_in_element_content|replace_whole_text))(\()</expression>
                		<capture number="1" name="name" />
                		<capture number="3" name="delimiter.balanced.parenthesis.begin" />
                	</starts-with>
                	<ends-with>
                		<expression>\)</expression>
                	</ends-with>
                	<subzones>
                		<include collection="identifier.function.subzones" />
                	</subzones>
                </zone>
               
                <!-- Type Functions -->
                <zone name="identifier.function.support.type">
                	<starts-with>
                		<expression>(?i)\b((s(trval|ettype)|i(s_(s(calar|tring)|callable|nu(ll|meric)|object|float|array|long|resource|bool)|ntval)|floatval|gettype))(\()</expression>
                		<capture number="1" name="name" />
                		<capture number="8" name="delimiter.balanced.parenthesis.begin" />
                	</starts-with>
                	<ends-with>
                		<expression>\)</expression>
                	</ends-with>
                	<subzones>
                		<include collection="identifier.function.subzones" />
                	</subzones>
                </zone>
        </collection>
	</library>
</syntax>